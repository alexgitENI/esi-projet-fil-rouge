stages:
  - build
  - test
  - cleanup

build-job:
  stage: build
  image: ubuntu:latest  # Utiliser l'image Ubuntu officielle
  services:
    - name: docker:19.03.12-dind  # Utiliser Docker-in-Docker
      alias: docker  # Définir un alias pour accéder à Docker
  before_script:
    - apt-get update && apt-get install -y curl jq sudo lsb-release
    - curl -fsSL https://get.docker.com | sh  # Installer Docker
    - usermod -aG docker $USER  # Ajouter l'utilisateur au groupe Docker
    - newgrp docker  # Recharger les groupes pour activer Docker pour l'utilisateur
  script:
    # Vérifier l'installation de Docker
    - docker --version

    # Télécharger la dernière version de docker-compose
    - curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

    # Rendre docker-compose exécutable
    - chmod +x /usr/local/bin/docker-compose

    # Vérifier l'installation de docker-compose
    - docker-compose --version

    # Construire l'image Docker sans cache
    - docker-compose build --no-cache
    - if [ $? -ne 0 ]; then exit 1; fi

    # Démarrer les services en mode détaché
    - docker-compose up -d
    - if [ $? -ne 0 ]; then exit 1; fi


unit-test-job:
  stage: test
  dependencies:
    - build-job
  script:
    - docker ps
    - docker exec esi-projet-fil-rouge-api-1 pytest
cleanup-job:
  stage: cleanup
  script:
    - docker-compose down 
